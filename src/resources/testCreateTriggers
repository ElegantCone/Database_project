CREATE  TRIGGER  tD_ate AFTER DELETE ON ate for each row
    -- erwin Builtin Trigger
-- DELETE trigger on ate
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate  internal_network on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00032bd7", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="internal_network"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_15", FK_COLUMNS="id_ate" */
    UPDATE internal_network
    SET
        /* %SetFK(internal_network,NULL) */
        internal_network.id_ate = NULL
    WHERE
        /* %JoinFKPK(internal_network,:%Old," = "," AND") */
            internal_network.id_ate = :old.id;

    /* erwin Builtin Trigger */
    /* ate  subscribers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_13", FK_COLUMNS="id_ate" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.id_ate = NULL
    WHERE
        /* %JoinFKPK(subscribers,:%Old," = "," AND") */
            subscribers.id_ate = :old.id;

    /* erwin Builtin Trigger */
    /* ate  payphones on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="payphones"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_8", FK_COLUMNS="id_ate" */
    UPDATE payphones
    SET
        /* %SetFK(payphones,NULL) */
        payphones.id_ate = NULL
    WHERE
        /* %JoinFKPK(payphones,:%Old," = "," AND") */
            payphones.id_ate = :old.id;

    /* erwin Builtin Trigger */
    /* ate  connection_requests on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="connection_requests"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_7", FK_COLUMNS="id_ate" */
    UPDATE connection_requests
    SET
        /* %SetFK(connection_requests,NULL) */
        connection_requests.id_ate = NULL
    WHERE
        /* %JoinFKPK(connection_requests,:%Old," = "," AND") */
            connection_requests.id_ate = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_ate BEFORE INSERT ON ate for each row
    -- erwin Builtin Trigger
-- INSERT trigger on ate
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate_types  ate on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00029a2e", PARENT_OWNER="", PARENT_TABLE="ate_types"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_43", FK_COLUMNS="ate_type_id" */
    UPDATE ate
    SET
        /* %SetFK(ate,NULL) */
        ate.ate_type_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate_types
                WHERE
                    /* %JoinFKPK(:%New,ate_types," = "," AND") */
                        :new.ate_type_id = ate_types.id
            )
        /* %JoinPKPK(ate,:%New," = "," AND") */
      and ate.id = :new.id;

    /* erwin Builtin Trigger */
    /* districts  ate on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="districts"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_33", FK_COLUMNS="district_id" */
    UPDATE ate
    SET
        /* %SetFK(ate,NULL) */
        ate.district_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM districts
                WHERE
                    /* %JoinFKPK(:%New,districts," = "," AND") */
                        :new.district_id = districts.id
            )
        /* %JoinPKPK(ate,:%New," = "," AND") */
      and ate.id = :new.id;

    /* erwin Builtin Trigger */
    /* ctn  ate on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ctn"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_5", FK_COLUMNS="id_ctn" */
    SELECT count(*) INTO NUMROWS
    FROM ctn
    WHERE
        /* %JoinFKPK(:%New,ctn," = "," AND") */
            :new.id_ctn = ctn.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20002,
                'Cannot insert ate because ctn does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ate AFTER UPDATE ON ate for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on ate
DECLARE NUMROWS INTEGER;
BEGIN
    /* ate  internal_network on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00067743", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="internal_network"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_15", FK_COLUMNS="id_ate" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE internal_network
        SET
            /* %SetFK(internal_network,NULL) */
            internal_network.id_ate = NULL
        WHERE
            /* %JoinFKPK(internal_network,:%Old," = ",",") */
                internal_network.id_ate = :old.id;
    END IF;

    /* ate  subscribers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_13", FK_COLUMNS="id_ate" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE subscribers
        SET
            /* %SetFK(subscribers,NULL) */
            subscribers.id_ate = NULL
        WHERE
            /* %JoinFKPK(subscribers,:%Old," = ",",") */
                subscribers.id_ate = :old.id;
    END IF;

    /* ate  payphones on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="payphones"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_8", FK_COLUMNS="id_ate" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE payphones
        SET
            /* %SetFK(payphones,NULL) */
            payphones.id_ate = NULL
        WHERE
            /* %JoinFKPK(payphones,:%Old," = ",",") */
                payphones.id_ate = :old.id;
    END IF;

    /* ate  connection_requests on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="connection_requests"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_7", FK_COLUMNS="id_ate" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE connection_requests
        SET
            /* %SetFK(connection_requests,NULL) */
            connection_requests.id_ate = NULL
        WHERE
            /* %JoinFKPK(connection_requests,:%Old," = ",",") */
                connection_requests.id_ate = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* ate_types  ate on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate_types"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_43", FK_COLUMNS="ate_type_id" */
    SELECT count(*) INTO NUMROWS
    FROM ate_types
    WHERE
        /* %JoinFKPK(:%New,ate_types," = "," AND") */
            :new.ate_type_id = ate_types.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.ate_type_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update ate because ate_types does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* districts  ate on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="districts"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_33", FK_COLUMNS="district_id" */
    SELECT count(*) INTO NUMROWS
    FROM districts
    WHERE
        /* %JoinFKPK(:%New,districts," = "," AND") */
            :new.district_id = districts.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.district_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update ate because districts does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* ctn  ate on child update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ctn"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_5", FK_COLUMNS="id_ctn" */
    SELECT count(*) INTO NUMROWS
    FROM ctn
    WHERE
        /* %JoinFKPK(:%New,ctn," = "," AND") */
            :new.id_ctn = ctn.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update ate because ctn does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_payphones BEFORE INSERT ON payphones for each row
    -- erwin Builtin Trigger
-- INSERT trigger on payphones
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate  payphones on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000d62c", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="payphones"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_8", FK_COLUMNS="id_ate" */
    UPDATE payphones
    SET
        /* %SetFK(payphones,NULL) */
        payphones.id_ate = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate
                WHERE
                    /* %JoinFKPK(:%New,ate," = "," AND") */
                        :new.id_ate = ate.id
            )
        /* %JoinPKPK(payphones,:%New," = "," AND") */
      and payphones.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_payphones AFTER UPDATE ON payphones for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on payphones
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate  payphones on child update no action */
    /* ERWIN_RELATION:CHECKSUM="0000f306", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="payphones"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_8", FK_COLUMNS="id_ate" */
    SELECT count(*) INTO NUMROWS
    FROM ate
    WHERE
        /* %JoinFKPK(:%New,ate," = "," AND") */
            :new.id_ate = ate.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_ate IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update payphones because ate does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ate_attrs AFTER DELETE ON ate_attrs for each row
    -- erwin Builtin Trigger
-- DELETE trigger on ate_attrs
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate_attrs  ate_types on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000b815", PARENT_OWNER="", PARENT_TABLE="ate_attrs"
    CHILD_OWNER="", CHILD_TABLE="ate_types"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_39", FK_COLUMNS="attribute_id" */
    UPDATE ate_types
    SET
        /* %SetFK(ate_types,NULL) */
        ate_types.attribute_id = NULL
    WHERE
        /* %JoinFKPK(ate_types,:%Old," = "," AND") */
            ate_types.attribute_id = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ate_attrs AFTER UPDATE ON ate_attrs for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on ate_attrs
DECLARE NUMROWS INTEGER;
BEGIN
    /* ate_attrs  ate_types on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0000d777", PARENT_OWNER="", PARENT_TABLE="ate_attrs"
      CHILD_OWNER="", CHILD_TABLE="ate_types"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_39", FK_COLUMNS="attribute_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE ate_types
        SET
            /* %SetFK(ate_types,NULL) */
            ate_types.attribute_id = NULL
        WHERE
            /* %JoinFKPK(ate_types,:%Old," = ",",") */
                ate_types.attribute_id = :old.id;
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ate_types AFTER DELETE ON ate_types for each row
    -- erwin Builtin Trigger
-- DELETE trigger on ate_types
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate_types  ate on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000a7b4", PARENT_OWNER="", PARENT_TABLE="ate_types"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_43", FK_COLUMNS="ate_type_id" */
    UPDATE ate
    SET
        /* %SetFK(ate,NULL) */
        ate.ate_type_id = NULL
    WHERE
        /* %JoinFKPK(ate,:%Old," = "," AND") */
            ate.ate_type_id = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_ate_types BEFORE INSERT ON ate_types for each row
    -- erwin Builtin Trigger
-- INSERT trigger on ate_types
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ate_attrs  ate_types on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000e7b1", PARENT_OWNER="", PARENT_TABLE="ate_attrs"
    CHILD_OWNER="", CHILD_TABLE="ate_types"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_39", FK_COLUMNS="attribute_id" */
    UPDATE ate_types
    SET
        /* %SetFK(ate_types,NULL) */
        ate_types.attribute_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate_attrs
                WHERE
                    /* %JoinFKPK(:%New,ate_attrs," = "," AND") */
                        :new.attribute_id = ate_attrs.id
            )
        /* %JoinPKPK(ate_types,:%New," = "," AND") */
      and ate_types.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ate_types AFTER UPDATE ON ate_types for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on ate_types
DECLARE NUMROWS INTEGER;
BEGIN
    /* ate_types  ate on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0001e29e", PARENT_OWNER="", PARENT_TABLE="ate_types"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_43", FK_COLUMNS="ate_type_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE ate
        SET
            /* %SetFK(ate,NULL) */
            ate.ate_type_id = NULL
        WHERE
            /* %JoinFKPK(ate,:%Old," = ",",") */
                ate.ate_type_id = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* ate_attrs  ate_types on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate_attrs"
      CHILD_OWNER="", CHILD_TABLE="ate_types"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_39", FK_COLUMNS="attribute_id" */
    SELECT count(*) INTO NUMROWS
    FROM ate_attrs
    WHERE
        /* %JoinFKPK(:%New,ate_attrs," = "," AND") */
            :new.attribute_id = ate_attrs.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.attribute_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update ate_types because ate_attrs does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_ctn AFTER DELETE ON ctn for each row
    -- erwin Builtin Trigger
-- DELETE trigger on ctn
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ctn  districts on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="000179f9", PARENT_OWNER="", PARENT_TABLE="ctn"
    CHILD_OWNER="", CHILD_TABLE="districts"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_34", FK_COLUMNS="ctn_id" */
    UPDATE districts
    SET
        /* %SetFK(districts,NULL) */
        districts.ctn_id = NULL
    WHERE
        /* %JoinFKPK(districts,:%Old," = "," AND") */
            districts.ctn_id = :old.id;

    /* erwin Builtin Trigger */
    /* ctn  ate on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ctn"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_5", FK_COLUMNS="id_ctn" */
    SELECT count(*) INTO NUMROWS
    FROM ate
    WHERE
        /*  %JoinFKPK(ate,:%Old," = "," AND") */
            ate.id_ctn = :old.id;
    IF (NUMROWS > 0)
    THEN
        raise_application_error(
                -20001,
                'Cannot delete ctn because ate exists.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_ctn AFTER UPDATE ON ctn for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on ctn
DECLARE NUMROWS INTEGER;
BEGIN
    /* ctn  districts on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0001aac9", PARENT_OWNER="", PARENT_TABLE="ctn"
      CHILD_OWNER="", CHILD_TABLE="districts"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_34", FK_COLUMNS="ctn_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE districts
        SET
            /* %SetFK(districts,NULL) */
            districts.ctn_id = NULL
        WHERE
            /* %JoinFKPK(districts,:%Old," = ",",") */
                districts.ctn_id = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* ctn  ate on parent update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ctn"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_5", FK_COLUMNS="id_ctn" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        SELECT count(*) INTO NUMROWS
        FROM ate
        WHERE
            /*  %JoinFKPK(ate,:%Old," = "," AND") */
                ate.id_ctn = :old.id;
        IF (NUMROWS > 0)
        THEN
            raise_application_error(
                    -20005,
                    'Cannot update ctn because ate exists.'
                );
        END IF;
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_districts AFTER DELETE ON districts for each row
    -- erwin Builtin Trigger
-- DELETE trigger on districts
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* districts  people on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00016382", PARENT_OWNER="", PARENT_TABLE="districts"
    CHILD_OWNER="", CHILD_TABLE="people"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_36", FK_COLUMNS="district_id" */
    UPDATE people
    SET
        /* %SetFK(people,NULL) */
        people.district_id = NULL
    WHERE
        /* %JoinFKPK(people,:%Old," = "," AND") */
            people.district_id = :old.id;

    /* erwin Builtin Trigger */
    /* districts  ate on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="districts"
    CHILD_OWNER="", CHILD_TABLE="ate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_33", FK_COLUMNS="district_id" */
    UPDATE ate
    SET
        /* %SetFK(ate,NULL) */
        ate.district_id = NULL
    WHERE
        /* %JoinFKPK(ate,:%Old," = "," AND") */
            ate.district_id = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_districts BEFORE INSERT ON districts for each row
    -- erwin Builtin Trigger
-- INSERT trigger on districts
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* ctn  districts on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000cb47", PARENT_OWNER="", PARENT_TABLE="ctn"
    CHILD_OWNER="", CHILD_TABLE="districts"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_34", FK_COLUMNS="ctn_id" */
    UPDATE districts
    SET
        /* %SetFK(districts,NULL) */
        districts.ctn_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ctn
                WHERE
                    /* %JoinFKPK(:%New,ctn," = "," AND") */
                        :new.ctn_id = ctn.id
            )
        /* %JoinPKPK(districts,:%New," = "," AND") */
      and districts.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_districts AFTER UPDATE ON districts for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on districts
DECLARE NUMROWS INTEGER;
BEGIN
    /* districts  people on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00028a32", PARENT_OWNER="", PARENT_TABLE="districts"
      CHILD_OWNER="", CHILD_TABLE="people"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_36", FK_COLUMNS="district_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE people
        SET
            /* %SetFK(people,NULL) */
            people.district_id = NULL
        WHERE
            /* %JoinFKPK(people,:%Old," = ",",") */
                people.district_id = :old.id;
    END IF;

    /* districts  ate on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="districts"
      CHILD_OWNER="", CHILD_TABLE="ate"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_33", FK_COLUMNS="district_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE ate
        SET
            /* %SetFK(ate,NULL) */
            ate.district_id = NULL
        WHERE
            /* %JoinFKPK(ate,:%Old," = ",",") */
                ate.district_id = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* ctn  districts on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ctn"
      CHILD_OWNER="", CHILD_TABLE="districts"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_34", FK_COLUMNS="ctn_id" */
    SELECT count(*) INTO NUMROWS
    FROM ctn
    WHERE
        /* %JoinFKPK(:%New,ctn," = "," AND") */
            :new.ctn_id = ctn.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.ctn_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update districts because ctn does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_payment_cheque AFTER DELETE ON payment_cheque for each row
    -- erwin Builtin Trigger
-- DELETE trigger on payment_cheque
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* payment_cheque  notifications on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000be26", PARENT_OWNER="", PARENT_TABLE="payment_cheque"
    CHILD_OWNER="", CHILD_TABLE="notifications"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_20", FK_COLUMNS="id_cheque" */
    UPDATE notifications
    SET
        /* %SetFK(notifications,NULL) */
        notifications.id_cheque = NULL
    WHERE
        /* %JoinFKPK(notifications,:%Old," = "," AND") */
            notifications.id_cheque = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_payment_cheque BEFORE INSERT ON payment_cheque for each row
    -- erwin Builtin Trigger
-- INSERT trigger on payment_cheque
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subscribers  payment_cheque on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000ef7a", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="payment_cheque"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_19", FK_COLUMNS="id_sub" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.id_sub = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20002,
                'Cannot insert payment_cheque because subscribers does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_payment_cheque AFTER UPDATE ON payment_cheque for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on payment_cheque
DECLARE NUMROWS INTEGER;
BEGIN
    /* payment_cheque  notifications on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0001e24d", PARENT_OWNER="", PARENT_TABLE="payment_cheque"
      CHILD_OWNER="", CHILD_TABLE="notifications"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_20", FK_COLUMNS="id_cheque" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE notifications
        SET
            /* %SetFK(notifications,NULL) */
            notifications.id_cheque = NULL
        WHERE
            /* %JoinFKPK(notifications,:%Old," = ",",") */
                notifications.id_cheque = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  payment_cheque on child update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="payment_cheque"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_19", FK_COLUMNS="id_sub" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.id_sub = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update payment_cheque because subscribers does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_notifications BEFORE INSERT ON notifications for each row
    -- erwin Builtin Trigger
-- INSERT trigger on notifications
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* payment_cheque  notifications on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000f006", PARENT_OWNER="", PARENT_TABLE="payment_cheque"
    CHILD_OWNER="", CHILD_TABLE="notifications"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_20", FK_COLUMNS="id_cheque" */
    UPDATE notifications
    SET
        /* %SetFK(notifications,NULL) */
        notifications.id_cheque = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM payment_cheque
                WHERE
                    /* %JoinFKPK(:%New,payment_cheque," = "," AND") */
                        :new.id_cheque = payment_cheque.id
            )
        /* %JoinPKPK(notifications,:%New," = "," AND") */
      and notifications.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_notifications AFTER UPDATE ON notifications for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on notifications
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* payment_cheque  notifications on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00010417", PARENT_OWNER="", PARENT_TABLE="payment_cheque"
      CHILD_OWNER="", CHILD_TABLE="notifications"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_20", FK_COLUMNS="id_cheque" */
    SELECT count(*) INTO NUMROWS
    FROM payment_cheque
    WHERE
        /* %JoinFKPK(:%New,payment_cheque," = "," AND") */
            :new.id_cheque = payment_cheque.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_cheque IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update notifications because payment_cheque does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_people AFTER DELETE ON people for each row
    -- erwin Builtin Trigger
-- DELETE trigger on people
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* people  subscribers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00019be9", PARENT_OWNER="", PARENT_TABLE="people"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_23", FK_COLUMNS="id_person" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.id_person = NULL
    WHERE
        /* %JoinFKPK(subscribers,:%Old," = "," AND") */
            subscribers.id_person = :old.id;

    /* erwin Builtin Trigger */
    /* people  connection_requests on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="people"
    CHILD_OWNER="", CHILD_TABLE="connection_requests"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_16", FK_COLUMNS="id_person" */
    UPDATE connection_requests
    SET
        /* %SetFK(connection_requests,NULL) */
        connection_requests.id_person = NULL
    WHERE
        /* %JoinFKPK(connection_requests,:%Old," = "," AND") */
            connection_requests.id_person = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_people BEFORE INSERT ON people for each row
    -- erwin Builtin Trigger
-- INSERT trigger on people
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* districts  people on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000d944", PARENT_OWNER="", PARENT_TABLE="districts"
    CHILD_OWNER="", CHILD_TABLE="people"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_36", FK_COLUMNS="district_id" */
    UPDATE people
    SET
        /* %SetFK(people,NULL) */
        people.district_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM districts
                WHERE
                    /* %JoinFKPK(:%New,districts," = "," AND") */
                        :new.district_id = districts.id
            )
        /* %JoinPKPK(people,:%New," = "," AND") */
      and people.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_people AFTER UPDATE ON people for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on people
DECLARE NUMROWS INTEGER;
BEGIN
    /* people  subscribers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0002ea78", PARENT_OWNER="", PARENT_TABLE="people"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_23", FK_COLUMNS="id_person" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE subscribers
        SET
            /* %SetFK(subscribers,NULL) */
            subscribers.id_person = NULL
        WHERE
            /* %JoinFKPK(subscribers,:%Old," = ",",") */
                subscribers.id_person = :old.id;
    END IF;

    /* people  connection_requests on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="people"
      CHILD_OWNER="", CHILD_TABLE="connection_requests"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_16", FK_COLUMNS="id_person" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE connection_requests
        SET
            /* %SetFK(connection_requests,NULL) */
            connection_requests.id_person = NULL
        WHERE
            /* %JoinFKPK(connection_requests,:%Old," = ",",") */
                connection_requests.id_person = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* districts  people on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="districts"
      CHILD_OWNER="", CHILD_TABLE="people"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_36", FK_COLUMNS="district_id" */
    SELECT count(*) INTO NUMROWS
    FROM districts
    WHERE
        /* %JoinFKPK(:%New,districts," = "," AND") */
            :new.district_id = districts.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.district_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update people because districts does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_connection_requests BEFORE INSERT ON connection_requests for each row
    -- erwin Builtin Trigger
-- INSERT trigger on connection_requests
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* people  connection_requests on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0001fa61", PARENT_OWNER="", PARENT_TABLE="people"
    CHILD_OWNER="", CHILD_TABLE="connection_requests"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_16", FK_COLUMNS="id_person" */
    UPDATE connection_requests
    SET
        /* %SetFK(connection_requests,NULL) */
        connection_requests.id_person = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM people
                WHERE
                    /* %JoinFKPK(:%New,people," = "," AND") */
                        :new.id_person = people.id
            )
        /* %JoinPKPK(connection_requests,:%New," = "," AND") */
      and connection_requests.id = :new.id;

    /* erwin Builtin Trigger */
    /* ate  connection_requests on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="connection_requests"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_7", FK_COLUMNS="id_ate" */
    UPDATE connection_requests
    SET
        /* %SetFK(connection_requests,NULL) */
        connection_requests.id_ate = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate
                WHERE
                    /* %JoinFKPK(:%New,ate," = "," AND") */
                        :new.id_ate = ate.id
            )
        /* %JoinPKPK(connection_requests,:%New," = "," AND") */
      and connection_requests.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_connection_requests AFTER UPDATE ON connection_requests for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on connection_requests
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* people  connection_requests on child update no action */
    /* ERWIN_RELATION:CHECKSUM="0001ff20", PARENT_OWNER="", PARENT_TABLE="people"
      CHILD_OWNER="", CHILD_TABLE="connection_requests"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_16", FK_COLUMNS="id_person" */
    SELECT count(*) INTO NUMROWS
    FROM people
    WHERE
        /* %JoinFKPK(:%New,people," = "," AND") */
            :new.id_person = people.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_person IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update connection_requests because people does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* ate  connection_requests on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="connection_requests"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_7", FK_COLUMNS="id_ate" */
    SELECT count(*) INTO NUMROWS
    FROM ate
    WHERE
        /* %JoinFKPK(:%New,ate," = "," AND") */
            :new.id_ate = ate.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_ate IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update connection_requests because ate does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_phone_numbers AFTER DELETE ON phone_numbers for each row
    -- erwin Builtin Trigger
-- DELETE trigger on phone_numbers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_numbers  internal_network on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001bdd8", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
    CHILD_OWNER="", CHILD_TABLE="internal_network"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_26", FK_COLUMNS="id_phone" */
    SELECT count(*) INTO NUMROWS
    FROM internal_network
    WHERE
        /*  %JoinFKPK(internal_network,:%Old," = "," AND") */
            internal_network.id_phone = :old.id;
    IF (NUMROWS > 0)
    THEN
        raise_application_error(
                -20001,
                'Cannot delete phone_numbers because internal_network exists.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* phone_numbers  subscribers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_24", FK_COLUMNS="phone_num_id" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.phone_num_id = NULL
    WHERE
        /* %JoinFKPK(subscribers,:%Old," = "," AND") */
            subscribers.phone_num_id = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_phone_numbers BEFORE INSERT ON phone_numbers for each row
    -- erwin Builtin Trigger
-- INSERT trigger on phone_numbers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_types  phone_numbers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000f3bb", PARENT_OWNER="", PARENT_TABLE="phone_types"
    CHILD_OWNER="", CHILD_TABLE="phone_numbers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_31", FK_COLUMNS="type_id" */
    UPDATE phone_numbers
    SET
        /* %SetFK(phone_numbers,NULL) */
        phone_numbers.type_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM phone_types
                WHERE
                    /* %JoinFKPK(:%New,phone_types," = "," AND") */
                        :new.type_id = phone_types.id
            )
        /* %JoinPKPK(phone_numbers,:%New," = "," AND") */
      and phone_numbers.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_phone_numbers AFTER UPDATE ON phone_numbers for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on phone_numbers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_numbers  internal_network on parent update restrict */
    /* ERWIN_RELATION:CHECKSUM="00030d2a", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
      CHILD_OWNER="", CHILD_TABLE="internal_network"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_26", FK_COLUMNS="id_phone" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        SELECT count(*) INTO NUMROWS
        FROM internal_network
        WHERE
            /*  %JoinFKPK(internal_network,:%Old," = "," AND") */
                internal_network.id_phone = :old.id;
        IF (NUMROWS > 0)
        THEN
            raise_application_error(
                    -20005,
                    'Cannot update phone_numbers because internal_network exists.'
                );
        END IF;
    END IF;

    /* phone_numbers  subscribers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_24", FK_COLUMNS="phone_num_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE subscribers
        SET
            /* %SetFK(subscribers,NULL) */
            subscribers.phone_num_id = NULL
        WHERE
            /* %JoinFKPK(subscribers,:%Old," = ",",") */
                subscribers.phone_num_id = :old.id;
    END IF;

    /* erwin Builtin Trigger */
    /* phone_types  phone_numbers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_types"
      CHILD_OWNER="", CHILD_TABLE="phone_numbers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_31", FK_COLUMNS="type_id" */
    SELECT count(*) INTO NUMROWS
    FROM phone_types
    WHERE
        /* %JoinFKPK(:%New,phone_types," = "," AND") */
            :new.type_id = phone_types.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.type_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update phone_numbers because phone_types does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_internal_network BEFORE INSERT ON internal_network for each row
    -- erwin Builtin Trigger
-- INSERT trigger on internal_network
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_numbers  internal_network on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001ef04", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
    CHILD_OWNER="", CHILD_TABLE="internal_network"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_26", FK_COLUMNS="id_phone" */
    SELECT count(*) INTO NUMROWS
    FROM phone_numbers
    WHERE
        /* %JoinFKPK(:%New,phone_numbers," = "," AND") */
            :new.id_phone = phone_numbers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20002,
                'Cannot insert internal_network because phone_numbers does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* ate  internal_network on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="internal_network"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_15", FK_COLUMNS="id_ate" */
    UPDATE internal_network
    SET
        /* %SetFK(internal_network,NULL) */
        internal_network.id_ate = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate
                WHERE
                    /* %JoinFKPK(:%New,ate," = "," AND") */
                        :new.id_ate = ate.id
            )
        /* %JoinPKPK(internal_network,:%New," = "," AND") */
      and internal_network.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_internal_network AFTER UPDATE ON internal_network for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on internal_network
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_numbers  internal_network on child update restrict */
    /* ERWIN_RELATION:CHECKSUM="0002036c", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
      CHILD_OWNER="", CHILD_TABLE="internal_network"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_26", FK_COLUMNS="id_phone" */
    SELECT count(*) INTO NUMROWS
    FROM phone_numbers
    WHERE
        /* %JoinFKPK(:%New,phone_numbers," = "," AND") */
            :new.id_phone = phone_numbers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update internal_network because phone_numbers does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* ate  internal_network on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="internal_network"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_15", FK_COLUMNS="id_ate" */
    SELECT count(*) INTO NUMROWS
    FROM ate
    WHERE
        /* %JoinFKPK(:%New,ate," = "," AND") */
            :new.id_ate = ate.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_ate IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update internal_network because ate does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_phone_types AFTER DELETE ON phone_types for each row
    -- erwin Builtin Trigger
-- DELETE trigger on phone_types
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_types  phone_numbers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00018b12", PARENT_OWNER="", PARENT_TABLE="phone_types"
    CHILD_OWNER="", CHILD_TABLE="phone_numbers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_31", FK_COLUMNS="type_id" */
    UPDATE phone_numbers
    SET
        /* %SetFK(phone_numbers,NULL) */
        phone_numbers.type_id = NULL
    WHERE
        /* %JoinFKPK(phone_numbers,:%Old," = "," AND") */
            phone_numbers.type_id = :old.id;

    /* erwin Builtin Trigger */
    /* phone_types  subscribers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_types"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_28", FK_COLUMNS="phone_type_id" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.phone_type_id = NULL
    WHERE
        /* %JoinFKPK(subscribers,:%Old," = "," AND") */
            subscribers.phone_type_id = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_phone_types AFTER UPDATE ON phone_types for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on phone_types
DECLARE NUMROWS INTEGER;
BEGIN
    /* phone_types  phone_numbers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0001beb8", PARENT_OWNER="", PARENT_TABLE="phone_types"
      CHILD_OWNER="", CHILD_TABLE="phone_numbers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_31", FK_COLUMNS="type_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE phone_numbers
        SET
            /* %SetFK(phone_numbers,NULL) */
            phone_numbers.type_id = NULL
        WHERE
            /* %JoinFKPK(phone_numbers,:%Old," = ",",") */
                phone_numbers.type_id = :old.id;
    END IF;

    /* phone_types  subscribers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_types"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_28", FK_COLUMNS="phone_type_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE subscribers
        SET
            /* %SetFK(subscribers,NULL) */
            subscribers.phone_type_id = NULL
        WHERE
            /* %JoinFKPK(subscribers,:%Old," = ",",") */
                subscribers.phone_type_id = :old.id;
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_subs_privileges AFTER DELETE ON subs_privileges for each row
    -- erwin Builtin Trigger
-- DELETE trigger on subs_privileges
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subs_privileges  subscribers on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000bad7", PARENT_OWNER="", PARENT_TABLE="subs_privileges"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_18", FK_COLUMNS="privilege" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.privilege = NULL
    WHERE
        /* %JoinFKPK(subscribers,:%Old," = "," AND") */
            subscribers.privilege = :old.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_subs_privileges AFTER UPDATE ON subs_privileges for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on subs_privileges
DECLARE NUMROWS INTEGER;
BEGIN
    /* subs_privileges  subscribers on parent update set null */
    /* ERWIN_RELATION:CHECKSUM="0000db02", PARENT_OWNER="", PARENT_TABLE="subs_privileges"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_18", FK_COLUMNS="privilege" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        UPDATE subscribers
        SET
            /* %SetFK(subscribers,NULL) */
            subscribers.privilege = NULL
        WHERE
            /* %JoinFKPK(subscribers,:%Old," = ",",") */
                subscribers.privilege = :old.id;
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_subscribers AFTER DELETE ON subscribers for each row
    -- erwin Builtin Trigger
-- DELETE trigger on subscribers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0002f3eb", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="intercity_calls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_32", FK_COLUMNS="incoming_id" */
    SELECT count(*) INTO NUMROWS
    FROM intercity_calls
    WHERE
        /*  %JoinFKPK(intercity_calls,:%Old," = "," AND") */
            intercity_calls.incoming_id = :old.id;
    IF (NUMROWS > 0)
    THEN
        raise_application_error(
                -20001,
                'Cannot delete subscribers because intercity_calls exists.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  payment_cheque on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="payment_cheque"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_19", FK_COLUMNS="id_sub" */
    SELECT count(*) INTO NUMROWS
    FROM payment_cheque
    WHERE
        /*  %JoinFKPK(payment_cheque,:%Old," = "," AND") */
            payment_cheque.id_sub = :old.id;
    IF (NUMROWS > 0)
    THEN
        raise_application_error(
                -20001,
                'Cannot delete subscribers because payment_cheque exists.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="intercity_calls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_17", FK_COLUMNS="outgoing_id" */
    SELECT count(*) INTO NUMROWS
    FROM intercity_calls
    WHERE
        /*  %JoinFKPK(intercity_calls,:%Old," = "," AND") */
            intercity_calls.outgoing_id = :old.id;
    IF (NUMROWS > 0)
    THEN
        raise_application_error(
                -20001,
                'Cannot delete subscribers because intercity_calls exists.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_subscribers BEFORE INSERT ON subscribers for each row
    -- erwin Builtin Trigger
-- INSERT trigger on subscribers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* phone_types  subscribers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00050e45", PARENT_OWNER="", PARENT_TABLE="phone_types"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_28", FK_COLUMNS="phone_type_id" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.phone_type_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM phone_types
                WHERE
                    /* %JoinFKPK(:%New,phone_types," = "," AND") */
                        :new.phone_type_id = phone_types.id
            )
        /* %JoinPKPK(subscribers,:%New," = "," AND") */
      and subscribers.id = :new.id;

    /* erwin Builtin Trigger */
    /* phone_numbers  subscribers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_24", FK_COLUMNS="phone_num_id" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.phone_num_id = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM phone_numbers
                WHERE
                    /* %JoinFKPK(:%New,phone_numbers," = "," AND") */
                        :new.phone_num_id = phone_numbers.id
            )
        /* %JoinPKPK(subscribers,:%New," = "," AND") */
      and subscribers.id = :new.id;

    /* erwin Builtin Trigger */
    /* people  subscribers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="people"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_23", FK_COLUMNS="id_person" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.id_person = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM people
                WHERE
                    /* %JoinFKPK(:%New,people," = "," AND") */
                        :new.id_person = people.id
            )
        /* %JoinPKPK(subscribers,:%New," = "," AND") */
      and subscribers.id = :new.id;

    /* erwin Builtin Trigger */
    /* subs_privileges  subscribers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subs_privileges"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_18", FK_COLUMNS="privilege" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.privilege = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM subs_privileges
                WHERE
                    /* %JoinFKPK(:%New,subs_privileges," = "," AND") */
                        :new.privilege = subs_privileges.id
            )
        /* %JoinPKPK(subscribers,:%New," = "," AND") */
      and subscribers.id = :new.id;

    /* erwin Builtin Trigger */
    /* ate  subscribers on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
    CHILD_OWNER="", CHILD_TABLE="subscribers"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_13", FK_COLUMNS="id_ate" */
    UPDATE subscribers
    SET
        /* %SetFK(subscribers,NULL) */
        subscribers.id_ate = NULL
    WHERE
        NOT EXISTS (
                SELECT * FROM ate
                WHERE
                    /* %JoinFKPK(:%New,ate," = "," AND") */
                        :new.id_ate = ate.id
            )
        /* %JoinPKPK(subscribers,:%New," = "," AND") */
      and subscribers.id = :new.id;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_subscribers AFTER UPDATE ON subscribers for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on subscribers
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on parent update restrict */
    /* ERWIN_RELATION:CHECKSUM="0008d415", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="intercity_calls"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_32", FK_COLUMNS="incoming_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        SELECT count(*) INTO NUMROWS
        FROM intercity_calls
        WHERE
            /*  %JoinFKPK(intercity_calls,:%Old," = "," AND") */
                intercity_calls.incoming_id = :old.id;
        IF (NUMROWS > 0)
        THEN
            raise_application_error(
                    -20005,
                    'Cannot update subscribers because intercity_calls exists.'
                );
        END IF;
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  payment_cheque on parent update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="payment_cheque"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_19", FK_COLUMNS="id_sub" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        SELECT count(*) INTO NUMROWS
        FROM payment_cheque
        WHERE
            /*  %JoinFKPK(payment_cheque,:%Old," = "," AND") */
                payment_cheque.id_sub = :old.id;
        IF (NUMROWS > 0)
        THEN
            raise_application_error(
                    -20005,
                    'Cannot update subscribers because payment_cheque exists.'
                );
        END IF;
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on parent update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="intercity_calls"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_17", FK_COLUMNS="outgoing_id" */
    IF
        /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
            :old.id <> :new.id
    THEN
        SELECT count(*) INTO NUMROWS
        FROM intercity_calls
        WHERE
            /*  %JoinFKPK(intercity_calls,:%Old," = "," AND") */
                intercity_calls.outgoing_id = :old.id;
        IF (NUMROWS > 0)
        THEN
            raise_application_error(
                    -20005,
                    'Cannot update subscribers because intercity_calls exists.'
                );
        END IF;
    END IF;

    /* erwin Builtin Trigger */
    /* phone_types  subscribers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_types"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_28", FK_COLUMNS="phone_type_id" */
    SELECT count(*) INTO NUMROWS
    FROM phone_types
    WHERE
        /* %JoinFKPK(:%New,phone_types," = "," AND") */
            :new.phone_type_id = phone_types.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.phone_type_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update subscribers because phone_types does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* phone_numbers  subscribers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="phone_numbers"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_24", FK_COLUMNS="phone_num_id" */
    SELECT count(*) INTO NUMROWS
    FROM phone_numbers
    WHERE
        /* %JoinFKPK(:%New,phone_numbers," = "," AND") */
            :new.phone_num_id = phone_numbers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.phone_num_id IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update subscribers because phone_numbers does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* people  subscribers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="people"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_23", FK_COLUMNS="id_person" */
    SELECT count(*) INTO NUMROWS
    FROM people
    WHERE
        /* %JoinFKPK(:%New,people," = "," AND") */
            :new.id_person = people.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_person IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update subscribers because people does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* subs_privileges  subscribers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subs_privileges"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_18", FK_COLUMNS="privilege" */
    SELECT count(*) INTO NUMROWS
    FROM subs_privileges
    WHERE
        /* %JoinFKPK(:%New,subs_privileges," = "," AND") */
            :new.privilege = subs_privileges.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.privilege IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update subscribers because subs_privileges does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* ate  subscribers on child update no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ate"
      CHILD_OWNER="", CHILD_TABLE="subscribers"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_13", FK_COLUMNS="id_ate" */
    SELECT count(*) INTO NUMROWS
    FROM ate
    WHERE
        /* %JoinFKPK(:%New,ate," = "," AND") */
            :new.id_ate = ate.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */
                :new.id_ate IS NOT NULL AND
                NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update subscribers because ate does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_intercity_calls BEFORE INSERT ON intercity_calls for each row
    -- erwin Builtin Trigger
-- INSERT trigger on intercity_calls
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00020ba0", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="intercity_calls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_32", FK_COLUMNS="incoming_id" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.incoming_id = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20002,
                'Cannot insert intercity_calls because subscribers does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
    CHILD_OWNER="", CHILD_TABLE="intercity_calls"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
    FK_CONSTRAINT="R_17", FK_COLUMNS="outgoing_id" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.outgoing_id = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20002,
                'Cannot insert intercity_calls because subscribers does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_intercity_calls AFTER UPDATE ON intercity_calls for each row
    -- erwin Builtin Trigger
-- UPDATE trigger on intercity_calls
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on child update restrict */
    /* ERWIN_RELATION:CHECKSUM="00020e52", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="intercity_calls"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_32", FK_COLUMNS="incoming_id" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.incoming_id = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update intercity_calls because subscribers does not exist.'
            );
    END IF;

    /* erwin Builtin Trigger */
    /* subscribers  intercity_calls on child update restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="subscribers"
      CHILD_OWNER="", CHILD_TABLE="intercity_calls"
      P2C_VERB_PHRASE="", C2P_VERB_PHRASE="",
      FK_CONSTRAINT="R_17", FK_COLUMNS="outgoing_id" */
    SELECT count(*) INTO NUMROWS
    FROM subscribers
    WHERE
        /* %JoinFKPK(:%New,subscribers," = "," AND") */
            :new.outgoing_id = subscribers.id;
    IF (
        /* %NotnullFK(:%New," IS NOT NULL AND") */

            NUMROWS = 0
        )
    THEN
        raise_application_error(
                -20007,
                'Cannot update intercity_calls because subscribers does not exist.'
            );
    END IF;


-- erwin Builtin Trigger
END;
/

